const express = require('express');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// reCAPTCHA —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (–≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á)
const RECAPTCHA_SECRET_KEY = '6Ldez-IrAAAAAAacbiUmF2eC7QTrcaZDSw7doQQW';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const users = new Map();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
async function verifyRecaptcha(recaptchaResponse, remoteAddress) {
    try {
        const response = await axios.post('https://www.google.com/recaptcha/api/siteverify', null, {
            params: {
                secret: RECAPTCHA_SECRET_KEY,
                response: recaptchaResponse,
                remoteip: remoteAddress
            }
        });
        
        console.log('reCAPTCHA verification result:', response.data);
        
        return response.data.success;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ reCAPTCHA:', error);
        return false;
    }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.post('/register', async (req, res) => {
    try {
        const { username, password, 'g-recaptcha-response': recaptchaResponse } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!username || !password || !recaptchaResponse) {
            return res.status(400).json({ 
                error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
            });
        }

        if (username.length < 3 || username.length > 20) {
            return res.status(400).json({ 
                error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤' 
            });
        }

        if (password.length < 6) {
            return res.status(400).json({ 
                error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
        const clientIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        const isRecaptchaValid = await verifyRecaptcha(recaptchaResponse, clientIP);
        
        if (!isRecaptchaValid) {
            return res.status(400).json({ 
                error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç.' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (users.has(username)) {
            return res.status(400).json({ 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ö—ç—à–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å!)
        users.set(username, {
            username,
            password, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è!
            registeredAt: new Date().toISOString(),
            ip: clientIP
        });

        console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${username} —Å IP: ${clientIP}`);

        res.json({ 
            success: true, 
            message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
            redirectUrl: 'https://t.me/wounsee'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/users', (req, res) => {
    if (process.env.NODE_ENV === 'production') {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }
    
    const usersArray = Array.from(users.values()).map(user => ({
        username: user.username,
        registeredAt: user.registeredAt,
        ip: user.ip
    }));
    
    res.json({
        total: usersArray.length,
        users: usersArray
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        usersCount: users.size
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).json({ error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
});

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    console.log(`üîë reCAPTCHA –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
});
